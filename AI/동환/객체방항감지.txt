Optical Flow를 활용한 물체 접근 및 멀어짐 분석 보고서

1. 프로젝트 개요
본 프로젝트는 1인칭 블랙박스 영상 데이터에서 Optical Flow를 통해 물체의 움직임을 분석하는 것을 목적으로 합니다. Optical Flow는 프레임 간의 픽셀 이동을 계산하여, 물체가 카메라에 접근하는지 멀어지는지를 시각적으로 표현하고, 이를 정량적으로 분석할 수 있는 기법입니다.

2. 데이터 개요
- 데이터 경로: Google Drive/dataset/img/case1/
- 데이터 형식: 001~150.png 형태의 연속 이미지
- 영상 특징:
  - 블랙박스에서 촬영된 1인칭 시점
  - 각 이미지 간 일정 간격 유지

3. Optical Flow 기법 소개
Optical Flow는 연속된 영상 프레임 사이의 픽셀 이동을 분석하는 기술입니다. 본 프로젝트에서는 Farneback Optical Flow 알고리즘을 사용하여 다음 정보를 추출하였습니다.

- 이동 방향: 각도로 계산되며, 색상(Hue)으로 표현됩니다.
- 이동 크기: 픽셀 이동의 크기는 속도를 나타내며, 밝기(Value)로 표현됩니다.

4. 색상의 의미
Optical Flow 결과는 HSV 색 공간을 사용해 시각화됩니다. 각각의 색상 요소는 다음과 같은 의미를 가집니다.
- Hue (색조): 물체의 이동 방향
  - 빨강: 오른쪽 이동
  - 파랑: 왼쪽 이동
  - 초록: 위쪽 이동
  - 노랑: 아래쪽 이동
- Saturation (채도): 색상의 선명도
  - 본 프로젝트에서는 채도를 항상 255로 설정하여 색상이 선명하게 보이도록 했습니다.
- Value (명도): 물체의 이동 속도
  - 이동 속도가 클수록 밝은 색으로, 이동이 거의 없으면 어두운 색으로 나타납니다.

5. 구현 방법
1) Google Drive에서 데이터 로드
   Google Drive에 저장된 블랙박스 이미지를 불러옵니다.
2) Optical Flow 계산
   두 연속 프레임 간의 Optical Flow를 계산하기 위해 `cv2.calcOpticalFlowFarneback` 함수를 사용합니다.
3) 시각화
   Optical Flow를 HSV 색 공간으로 변환하여 물체의 이동 방향과 속도를 시각적으로 표현합니다.
4) 접근 및 멀어짐 분석
   Optical Flow 크기(Magnitude)의 평균값을 계산하여 물체의 움직임을 판단합니다.

6. 결과
- 프레임 시각화
  Optical Flow 결과를 시각화한 결과, 이동 방향과 속도를 확인할 수 있었습니다.
  - 밝은 색상: 빠르게 움직이는 물체
  - 어두운 색상: 정지 상태에 가까운 물체
  - 다양한 색상: 물체의 이동 방향
- 정량적 분석
  평균 이동 크기(Magnitude)를 기준으로 물체의 움직임을 분석한 결과:
  Frame 1: Average Magnitude = 2.35 (Object is approaching)
  Frame 2: Average Magnitude = 1.25 (Object is stationary or moving away)
  Frame 3: Average Magnitude = 2.75 (Object is approaching)

7. 결론 및 한계
결론:
- Optical Flow를 통해 블랙박스 영상에서 물체의 이동을 정량적, 시각적으로 분석할 수 있음을 확인하였습니다.
- 이는 물체 접근 경고 시스템 및 운전자 보조 시스템에 유용하게 활용될 수 있습니다.

한계:
1) 노이즈: 조명 변화나 카메라 흔들림으로 인한 Optical Flow 결과의 노이즈 발생
   - 해결 방안: 조명 정규화 및 영상 안정화 적용
2) 정확도: 이동 속도와 방향을 정밀하게 측정하기 위해 추가적인 모델(예: 딥러닝 기반 Optical Flow) 도입 가능
3) 실시간성: 현재는 사후 처리 방식으로 구현되었으며, 실시간 처리 속도 개선 필요
4) 속도: Optical Flow는 처리 속도가 느려 실시간 구현에 제약이 있을 수 있음
5) 객체 크기: 객체가 작거나 멀리 떨어져 있으면 이동 정보가 제대로 인식되지 않을 가능성이 있음

8. 코드 및 실행 환경
- 사용 기술: Python, OpenCV, Google Colab
- Optical Flow 계산 코드:
  flow = cv2.calcOpticalFlowFarneback(prev_frame, curr_frame, None,
                                      0.5, 3, 15, 3, 5, 1.2, 0)

9. 참고 문헌
- Farneback, G. (2003). "Two-Frame Motion Estimation Based on Polynomial Expansion."
- OpenCV 공식 문서: Optical Flow 관련 API
