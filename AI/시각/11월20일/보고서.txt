1. 프로젝트 개요
본 프로젝트는 사고 발생 가능성을 예측하는 딥러닝 모델을 설계하고, 성능 평가를 통해 모델의 적합성을 확인하는 것을 목적으로 한다. 이를 위해 이미지 데이터를 기반으로 사고 발생 여부를 이진 분류하는 모델을 구현하였다.

2. 데이터 준비
데이터셋 로드 및 전처리

데이터셋은 지정된 디렉터리에서 .png 형식의 이미지 파일로 로드된다.
이미지는 224x224 픽셀로 크기 조정되며, 각 픽셀 값을 0~1로 정규화하였다.
레이블링은 파일 이름에 accident라는 키워드 포함 여부를 기준으로 사고 발생(1) 또는 미발생(0)으로 지정하였다.
훈련 및 검증 데이터 분리

scikit-learn의 train_test_split을 사용하여 데이터를 훈련용(80%)과 검증용(20%)으로 분리하였다.
데이터 증강

ImageDataGenerator를 사용하여 이미지 회전, 이동, 확대, 반전 등 다양한 증강 기법을 적용하였다.
3. 모델 설계 및 학습
모델 구조

Backbone: MobileNetV2를 사용하며, 사전 학습된 가중치를 활용하여 모델의 학습 속도와 정확도를 높였다.
Custom Layers:
GlobalAveragePooling2D: 특성 맵의 평균을 계산하여 고차원 특성을 압축.
Dense: 완전 연결층으로 이진 분류를 위한 출력층(sigmoid 활성화 함수) 구성.
컴파일 및 학습

옵티마이저: Adam
손실 함수: Binary Crossentropy
평가 지표: Accuracy
에포크 수: 10
배치 크기: 32
학습 결과

훈련 및 검증 데이터의 정확도와 손실 함수를 각각 시각화하여 모델의 수렴 여부를 확인하였다.
4. 모델 성능 평가
Confusion Matrix

검증 데이터에서 예측된 레이블과 실제 레이블의 비교를 통해 혼동 행렬을 생성.
혼동 행렬은 모델의 분류 성능을 직관적으로 파악할 수 있게 한다.
TP (True Positive), FP (False Positive), FN (False Negative), TN (True Negative) 값 포함.
ROC Curve 및 AUC

ROC Curve는 모델의 분류 임계값에 따라 TPR(참 양성 비율)과 FPR(거짓 양성 비율)을 시각화.
AUC는 ROC 곡선 아래의 면적으로, 모델의 분류 성능을 0~1 사이의 점수로 나타낸다.
AUC 값이 1에 가까울수록 좋은 성능을 의미.
Precision-Recall Curve

Precision(정밀도)과 Recall(재현율) 간의 관계를 시각화하여 모델의 분류 성능을 분석.
주로 불균형 데이터셋에서 유용한 성능 평가 도구.
5. 코드 구조 설명
모듈 구성

데이터 전처리, 모델 학습, 성능 평가 등 모듈화된 구조로 코드 작성.
load_images_and_labels: 데이터 로드 및 레이블링.
plot_*: 학습 결과 및 성능 평가를 위한 다양한 시각화 함수.
모델 저장

학습 완료된 모델은 .h5 형식으로 저장되어 재사용 가능.
확장 가능성

데이터셋 경로와 레이블링 기준을 변경하면 다른 사고 예측 관련 데이터에도 적용 가능.
6. 결과 분석 및 개선 방안
결과 분석

혼동 행렬에서 모델이 어떤 상황에서 오분류하는지 확인 가능.
AUC와 Precision-Recall Curve를 통해 임계값 변경 시의 성능을 예측할 수 있음.
한계점

데이터셋 크기 및 다양성 부족으로 인해 모델의 일반화 성능이 제한될 가능성.
사전 학습된 MobileNetV2 가중치를 사용하였으나, 특정 도메인에 최적화되지 않은 점.
개선 방안

더 많은 데이터셋 확보 및 다양한 데이터 증강 적용.
사전 학습된 MobileNetV2의 상위 층을 미세 조정(Fine-tuning)하여 도메인에 특화된 모델로 개선.
비시각적 데이터(도로 상태, 속도 등)와 통합하여 다중 모달 학습 모델 개발.
7. 결론
본 프로젝트는 사고 발생 여부를 예측하는 딥러닝 모델을 성공적으로 설계하고, 성능 평가를 통해 그 가능성을 확인하였다. 향후 추가적인 데이터와 도메인 특화 기법을 도입함으로써, 모델의 실효성을 더욱 향상시킬 수 있을 것이다.